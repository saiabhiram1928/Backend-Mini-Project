// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoStoreManagementApi.Contexts;

#nullable disable

namespace VideoStoreManagementApi.Migrations
{
    [DbContext(typeof(VideoStoreContext))]
    [Migration("20240529123221_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VideoStoreManagementApi.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("PrimaryAdress")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = "Downtown",
                            City = "CityA",
                            CustomerId = 101,
                            PrimaryAdress = true,
                            State = "StateA",
                            Zipcode = 12345
                        },
                        new
                        {
                            Id = 2,
                            Area = "Uptown",
                            City = "CityB",
                            CustomerId = 102,
                            PrimaryAdress = false,
                            State = "StateB",
                            Zipcode = 54321
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 101,
                            TotalPrice = 19.99f
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 102,
                            TotalPrice = 29.98f
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.HasIndex("CartId", "VideoId")
                        .IsUnique();

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            Price = 19.99f,
                            Qty = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CartId = 2,
                            Price = 29.98f,
                            Qty = 2,
                            VideoId = 2
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Customer", b =>
                {
                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Uid = 101,
                            MembershipType = "Basic"
                        },
                        new
                        {
                            Uid = 102,
                            MembershipType = "Premium"
                        },
                        new
                        {
                            Uid = 100,
                            MembershipType = "Premium"
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Inventory", b =>
                {
                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            VideoId = 1,
                            LastUpdate = new DateTime(2024, 5, 28, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3319),
                            Stock = 10
                        },
                        new
                        {
                            VideoId = 2,
                            LastUpdate = new DateTime(2024, 5, 27, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3324),
                            Stock = 5
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PaymentDone")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RealDeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RentalOrPermanent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryAddressId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 101,
                            DeliveryAddressId = 1,
                            DeliveryStatus = "Delivered",
                            ExpectedDeliveryDate = new DateTime(2024, 6, 3, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3358),
                            OrderedDate = new DateTime(2024, 5, 19, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3358),
                            PaymentDone = true,
                            PaymentType = "COD",
                            RentalOrPermanent = "Rental"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 102,
                            DeliveryAddressId = 2,
                            DeliveryStatus = "Delivered",
                            ExpectedDeliveryDate = new DateTime(2024, 6, 8, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3360),
                            OrderedDate = new DateTime(2024, 5, 9, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3360),
                            PaymentDone = false,
                            PaymentType = "COD",
                            RentalOrPermanent = "Permanent"
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("VideoId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 19.99f,
                            Qty = 1,
                            VideoId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            Price = 29.98f,
                            Qty = 2,
                            VideoId = 2
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PaymentSucess")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Permanent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("TotalQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Permanents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 2,
                            TotalPrice = 29.98f,
                            TotalQty = 2
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("LateFee")
                        .HasColumnType("real");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("TotalQty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DueDate = new DateTime(2024, 5, 30, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3437),
                            LateFee = 0f,
                            OrderId = 1,
                            RentDate = new DateTime(2024, 5, 20, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3436),
                            ReturnDate = new DateTime(2024, 5, 29, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3437),
                            TotalPrice = 19.99f,
                            TotalQty = 1
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.User", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Uid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Uid = 101,
                            Email = "test1@gmail.com",
                            FirstName = "test1",
                            LastName = "test",
                            Password = new byte[] { 0, 66, 11, 112, 205, 83, 52, 181, 124, 220, 196, 42, 71, 224, 95, 199, 238, 202, 112, 231, 210, 51, 214, 242, 199, 136, 186, 195, 223, 156, 107, 126, 220, 37, 161, 86, 230, 243, 137, 155, 14, 140, 113, 120, 3, 253, 199, 148, 10, 176, 136, 219, 219, 254, 142, 128, 221, 189, 188, 182, 243, 56, 124, 24 },
                            Role = "Customer",
                            Salt = new byte[] { 206, 131, 223, 180, 54, 214, 110, 39, 248, 43, 254, 31, 164, 228, 116, 164, 125, 100, 220, 246, 79, 119, 202, 63, 103, 199, 147, 169, 31, 242, 83, 186, 58, 220, 146, 66, 207, 152, 188, 88, 131, 10, 110, 65, 110, 205, 71, 137, 223, 78, 32, 154, 77, 77, 221, 137, 67, 183, 108, 71, 47, 138, 225, 140, 77, 131, 238, 190, 43, 251, 68, 37, 12, 199, 173, 100, 201, 159, 70, 209, 138, 232, 248, 35, 158, 198, 21, 53, 187, 93, 179, 93, 171, 195, 143, 190, 230, 148, 60, 209, 243, 199, 105, 49, 239, 141, 122, 16, 123, 115, 59, 163, 154, 216, 72, 93, 136, 35, 13, 36, 212, 33, 212, 155, 123, 212, 28, 196 },
                            Verified = true
                        },
                        new
                        {
                            Uid = 102,
                            Email = "test2@gmail.com",
                            FirstName = "test2",
                            LastName = "test",
                            Password = new byte[] { 0, 66, 11, 112, 205, 83, 52, 181, 124, 220, 196, 42, 71, 224, 95, 199, 238, 202, 112, 231, 210, 51, 214, 242, 199, 136, 186, 195, 223, 156, 107, 126, 220, 37, 161, 86, 230, 243, 137, 155, 14, 140, 113, 120, 3, 253, 199, 148, 10, 176, 136, 219, 219, 254, 142, 128, 221, 189, 188, 182, 243, 56, 124, 24 },
                            Role = "Customer",
                            Salt = new byte[] { 206, 131, 223, 180, 54, 214, 110, 39, 248, 43, 254, 31, 164, 228, 116, 164, 125, 100, 220, 246, 79, 119, 202, 63, 103, 199, 147, 169, 31, 242, 83, 186, 58, 220, 146, 66, 207, 152, 188, 88, 131, 10, 110, 65, 110, 205, 71, 137, 223, 78, 32, 154, 77, 77, 221, 137, 67, 183, 108, 71, 47, 138, 225, 140, 77, 131, 238, 190, 43, 251, 68, 37, 12, 199, 173, 100, 201, 159, 70, 209, 138, 232, 248, 35, 158, 198, 21, 53, 187, 93, 179, 93, 171, 195, 143, 190, 230, 148, 60, 209, 243, 199, 105, 49, 239, 141, 122, 16, 123, 115, 59, 163, 154, 216, 72, 93, 136, 35, 13, 36, 212, 33, 212, 155, 123, 212, 28, 196 },
                            Verified = true
                        },
                        new
                        {
                            Uid = 100,
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = new byte[] { 39, 87, 28, 148, 77, 85, 247, 38, 234, 84, 237, 80, 168, 176, 219, 176, 132, 137, 37, 182, 164, 169, 161, 155, 87, 238, 173, 40, 174, 132, 248, 181, 190, 254, 15, 29, 121, 5, 87, 44, 41, 74, 75, 245, 125, 61, 75, 2, 120, 23, 46, 188, 215, 172, 49, 12, 165, 196, 62, 18, 131, 198, 204, 241 },
                            Role = "Admin",
                            Salt = new byte[] { 206, 131, 223, 180, 54, 214, 110, 39, 248, 43, 254, 31, 164, 228, 116, 164, 125, 100, 220, 246, 79, 119, 202, 63, 103, 199, 147, 169, 31, 242, 83, 186, 58, 220, 146, 66, 207, 152, 188, 88, 131, 10, 110, 65, 110, 205, 71, 137, 223, 78, 32, 154, 77, 77, 221, 137, 67, 183, 108, 71, 47, 138, 225, 140, 77, 131, 238, 190, 43, 251, 68, 37, 12, 199, 173, 100, 201, 159, 70, 209, 138, 232, 248, 35, 158, 198, 21, 53, 187, 93, 179, 93, 171, 195, 143, 190, 230, 148, 60, 209, 243, 199, 105, 49, 239, 141, 122, 16, 123, 115, 59, 163, 154, 216, 72, 93, 136, 35, 13, 36, 212, 33, 212, 155, 123, 212, 28, 196 },
                            Verified = true
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "At Mr. Rad's Warehouse, the best hip-hop crews in Los Angeles compete for money and respect.",
                            Director = "Director 1",
                            Genre = "Action",
                            Price = 19.99f,
                            ReleaseDate = new DateTime(2023, 5, 29, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3287),
                            Tittle = "Action Movie"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A basketball player's father must try to convince him to go to a college so he can get a shorter sentence.",
                            Director = "Director 2",
                            Genre = "Comedy",
                            Price = 14.99f,
                            ReleaseDate = new DateTime(2022, 5, 29, 18, 2, 21, 393, DateTimeKind.Local).AddTicks(3302),
                            Tittle = "Comedy Movie"
                        });
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Address", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Customer", "Customer")
                        .WithMany("Address")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Cart", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("VideoStoreManagementApi.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.CartItem", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoStoreManagementApi.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Customer", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("VideoStoreManagementApi.Models.Customer", "Uid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Inventory", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Video", "Video")
                        .WithOne()
                        .HasForeignKey("VideoStoreManagementApi.Models.Inventory", "VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Order", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoStoreManagementApi.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.OrderItem", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoStoreManagementApi.Models.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Payment", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Permanent", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Order", "Order")
                        .WithOne("Permanent")
                        .HasForeignKey("VideoStoreManagementApi.Models.Permanent", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Rental", b =>
                {
                    b.HasOne("VideoStoreManagementApi.Models.Order", "Order")
                        .WithOne("Rental")
                        .HasForeignKey("VideoStoreManagementApi.Models.Rental", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Customer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VideoStoreManagementApi.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("Permanent")
                        .IsRequired();

                    b.Navigation("Rental")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
